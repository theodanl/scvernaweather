import asyncio
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
import requests
import datetime

bot = Bot(token='6964370519:AAETLP2uaIyHbtpp3JRaoeqKlIAH7mm6bsc')
dp = Dispatcher(bot)

start_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton(text='Set City'))

user_city = {}  # Dictionary to store user-selected cities
default_city = {}  # Dictionary to store default cities

# Dictionary mapping weather types to emojis
weather_emojis = {
     "—è—Å–Ω–æ": "‚òÄÔ∏è",
    "–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ": "‚õÖÔ∏è",
    "–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏": "üå§Ô∏è",
    "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "üå•Ô∏è",
    "–æ–±–ª–∞—á–Ω–æ": "‚òÅÔ∏è",
    "–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å": "üåßÔ∏è",
    "–¥–æ–∂–¥—å": "üåßÔ∏è",
    "–ø—Ä–æ–ª–∏–≤–Ω–æ–π –¥–æ–∂–¥—å": "‚õàÔ∏è",
    "–ª–µ–≥–∫–∏–π —Å–Ω–µ–≥": "üå®Ô∏è",
    "—Å–Ω–µ–≥": "‚ùÑÔ∏è",
    "–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥": "üå®Ô∏è",
    "–≥—Ä–æ–∑–∞": "‚õàÔ∏è",
    "—Ç—É–º–∞–Ω": "üå´Ô∏è",
    "–ø–∞—Å–º—É—Ä–Ω–æ": "‚òÅÔ∏è",
    "–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "üå•Ô∏è"
}

async def send_hourly_weather_notification(city, chat_id):
    try:
        open_weather_token = 'f8c9e0a759bf609bf41e844d4b02dc54'

        r = requests.get(
            f"http://api.openweathermap.org/data/2.5/weather?q={city}&lang=ru&appid={open_weather_token}&units=metric"
        )
        data = r.json()

        temp = data['main']['temp']
        description = data['weather'][0]['description']
        weather_type = data['weather'][0]['main']

        emoji = weather_emojis.get(weather_type, '')  # Get emoji for weather type

        if temp < -25:
            result = '–û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ, –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ—Å—Ç–∞—Ç—å—Å—è –¥–æ–º–∞.'
        elif temp < 0:
            result = '–•–æ–ª–æ–¥–Ω–æ, –æ–¥–µ–≤–∞–π—Ç–µ—Å—å —Ç–µ–ø–ª–µ–µ.'
        elif temp < 10:
            result = '–ü—Ä–æ—Ö–ª–∞–¥–Ω–æ, –ª—É—á—à–µ –Ω–∞–¥–µ—Ç—å –∫—É—Ä—Ç–∫—É.'
        elif temp < 20:
            result = '–¢–µ–ø–ª–æ, –Ω–∞ —É–ª–∏—Ü–µ –ø—Ä–∏—è—Ç–Ω–æ.'
        elif temp < 30:
            result = '–ñ–∞—Ä–∫–æ, –º–æ–∂–µ—Ç–µ –Ω–∞–¥–µ—Ç—å —á—Ç–æ-—Ç–æ –ª–µ–≥–∫–æ–µ.'
        else:
            result = '–û—á–µ–Ω—å –∂–∞—Ä–∫–æ, –Ω–∞–¥–µ–Ω—å—Ç–µ —á—Ç–æ-—Ç–æ –ª–µ–≥–∫–æ–µ –∏ –ø–µ–π—Ç–µ –≤–æ–¥—É.'

        await bot.send_message(chat_id, f"–°–µ–π—á–∞—Å –≤ –≥–æ—Ä–æ–¥–µ {city} {description} {emoji}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C. {result}")

    except Exception as ex:
        await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}: {ex}")

async def hourly_weather_notifications():
    while True:
        await asyncio.sleep(60)  # –ó–∞–¥–µ—Ä–∂–∫–∞
        for chat_id, city in default_city.items():
            await send_hourly_weather_notification(city, chat_id)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ. '
                                                  '–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥.', reply_markup=start_keyboard)

@dp.message_handler(text='Set City')
async def set_city(message: types.Message):
    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥:')
    user_city[message.from_user.id] = True

@dp.message_handler(content_types=["text"])
async def get_weather_info(message: types.Message):
    try:
        open_weather_token = 'f8c9e0a759bf609bf41e844d4b02dc54'
        weather_emojis = {
            "—è—Å–Ω–æ": "‚òÄÔ∏è",
            "–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ": "‚õÖÔ∏è",
            "–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏": "üå§Ô∏è",
            "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "üå•Ô∏è",
            "–æ–±–ª–∞—á–Ω–æ": "‚òÅÔ∏è",
            "–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å": "üåßÔ∏è",
            "–¥–æ–∂–¥—å": "üåßÔ∏è",
            "–ø—Ä–æ–ª–∏–≤–Ω–æ–π –¥–æ–∂–¥—å": "‚õàÔ∏è",
            "–ª–µ–≥–∫–∏–π —Å–Ω–µ–≥": "üå®Ô∏è",
            "—Å–Ω–µ–≥": "‚ùÑÔ∏è",
            "–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥": "üå®Ô∏è",
            "–≥—Ä–æ–∑–∞": "‚õàÔ∏è",
            "—Ç—É–º–∞–Ω": "üå´Ô∏è",
            "–ø–∞—Å–º—É—Ä–Ω–æ": "‚òÅÔ∏è",
            "–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "üå•Ô∏è"
        }
        
        r = requests.get(
            f"http://api.openweathermap.org/data/2.5/weather?q={message.text}&lang=ru&appid={open_weather_token}&units=metric"
        )
        data = r.json()
        temp = data['main']['temp']
        description = data['weather'][0]['description']
        weather_type = data['weather'][0]['main']
        emoji = weather_emojis.get(description, "")
        
        if temp < -25:
            result = '–û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ, –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ—Å—Ç–∞—Ç—å—Å—è –¥–æ–º–∞.'
        elif temp < 0:
            result = '–•–æ–ª–æ–¥–Ω–æ, –æ–¥–µ–≤–∞–π—Ç–µ—Å—å —Ç–µ–ø–ª–µ–µ.'
        elif temp < 10:
            result = '–ü—Ä–æ—Ö–ª–∞–¥–Ω–æ, –ª—É—á—à–µ –Ω–∞–¥–µ—Ç—å –∫—É—Ä—Ç–∫—É.'
        elif temp < 20:
            result = '–¢–µ–ø–ª–æ, –Ω–∞ —É–ª–∏—Ü–µ –ø—Ä–∏—è—Ç–Ω–æ.'
        elif temp < 30:
            result = '–ñ–∞—Ä–∫–æ, –º–æ–∂–µ—Ç–µ –Ω–∞–¥–µ—Ç—å —á—Ç–æ-—Ç–æ –ª–µ–≥–∫–æ–µ.'
        else:
            result = '–û—á–µ–Ω—å –∂–∞—Ä–∫–æ, –Ω–∞–¥–µ–Ω—å—Ç–µ —á—Ç–æ-—Ç–æ –ª–µ–≥–∫–æ–µ –∏ –ø–µ–π—Ç–µ –≤–æ–¥—É.'
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = f"<b>–°–µ–π—á–∞—Å –≤ –≥–æ—Ä–æ–¥–µ {message.text}</b>\n\n"\
                       f"<i>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</i> {temp}¬∞C\n"\
                       f"<i>–ü–æ–≥–æ–¥–∞:</i> {description} {emoji}\n"\
                       f"<i>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</i> {result}\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Ç–µ–∫—Å—Ç–æ–º
        with open("./images/–∂–∞—Ä–∫–æ.jpg", "rb") as photo_file:
            await bot.send_photo(
                message.chat.id,
                photo=photo_file,
                caption=message_text,
                parse_mode="HTML"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="–ü–æ–≥–æ–¥–∞ –Ω–∞ 1 –¥–µ–Ω—å", callback_data=f"weather_forecast_1_{message.text}"))
        keyboard.add(types.InlineKeyboardButton(text="–ü–æ–≥–æ–¥–∞ –Ω–∞ 3 –¥–Ω—è", callback_data=f"weather_forecast_3_{message.text}"))
        keyboard.add(types.InlineKeyboardButton(text="–ü–æ–≥–æ–¥–∞ –Ω–∞ 7 –¥–Ω–µ–π", callback_data=f"weather_forecast_7_{message.text}"))
        await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã:", reply_markup=keyboard)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≥–æ—Ä–æ–¥ –∫–∞–∫ –µ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–π
        default_city[message.from_user.id] = message.text

    except Exception as ex:
        await bot.send_message(message.from_user.id, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")

@dp.callback_query_handler(lambda query: query.data.startswith('weather_forecast_'))
async def send_weather_forecast(callback_query: types.CallbackQuery):
    forecast_days = int(callback_query.data.split('_')[2])
    city = callback_query.data.split('_')[3]

    try:
        open_weather_token = 'f8c9e0a759bf609bf41e844d4b02dc54'

        if forecast_days == 1:
            r = requests.get(
                f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={open_weather_token}&units=metric&lang=ru"
            )
            data = r.json()
            temp = data['main']['temp']
            description = data['weather'][0]['description']
            emoji = weather_emojis.get(description, "")

            await bot.send_message(callback_query.from_user.id, f"{emoji} –°–µ–π—á–∞—Å –≤ –≥–æ—Ä–æ–¥–µ {city}: {description}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C.")

        elif forecast_days == 3 or forecast_days == 7:
            r = requests.get(
                f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={open_weather_token}&units=metric&lang=ru"
            )
            data = r.json()
            forecast_data = []

            # Get current date and time
            current_date = datetime.datetime.now().date()

            # Create a dictionary to store forecast for each day
            daily_forecast = {}

            # Find weather data for the specified number of days
            for forecast in data['list']:
                forecast_date = datetime.datetime.strptime(forecast['dt_txt'], '%Y-%m-%d %H:%M:%S').date()
                if (forecast_date - current_date).days < forecast_days + 1:
                    date_str = forecast_date.strftime("%Y-%m-%d")
                    if date_str not in daily_forecast:
                        daily_forecast[date_str] = []
                    daily_forecast[date_str].append({
                        'time': datetime.datetime.strptime(forecast['dt_txt'], '%Y-%m-%d %H:%M:%S').strftime("%H:%M"),
                        'temp': forecast['main']['temp'],
                        'description': forecast['weather'][0]['description']
                    })

            forecast_message = f"<b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ {city} –Ω–∞ {forecast_days} –¥–Ω–µ–π:</b>\n\n"

            # Output forecast for each day separately
            for date, forecasts in daily_forecast.items():
                forecast_message += f"<b>{date}:</b>\n"
                for forecast in forecasts:
                    emoji = weather_emojis.get(forecast['description'], "")
                    forecast_message += f"{forecast['time']} : ‚òë {forecast['temp']}¬∞C - {emoji} {forecast['description']}\n"
                forecast_message += "\n"

            await bot.send_message(callback_query.from_user.id, forecast_message, parse_mode="HTML")

    except Exception as ex:
        await bot.send_message(callback_query.from_user.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã")

async def on_startup(_):
    asyncio.create_task(hourly_weather_notifications())

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)